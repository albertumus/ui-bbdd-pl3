/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VentanasExtra;

/**
 *
 * @author razvanvc
 */
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;

public class Consultas extends javax.swing.JFrame {

    public static Connection conexion;
    public static DefaultTableModel model;

    /**
     * Creates new form N_Ticket
     */
    public Consultas(Connection conexion) {
        Consultas.conexion = conexion;
        initComponents();
        model = (DefaultTableModel) tbl_Resultado.getModel();
        model.setColumnCount(0);
        ta_CP.setText("");
        ta_Info.setText("Selecciona una consulta porfavor.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp_Info = new javax.swing.JScrollPane();
        ta_Info = new javax.swing.JTextArea();
        sp_CP = new javax.swing.JScrollPane();
        ta_CP = new javax.swing.JTextArea();
        cb_qPL2 = new javax.swing.JComboBox<>();
        btn_Limpiar = new javax.swing.JButton();
        btn_Consulta = new javax.swing.JButton();
        lbl_Info = new javax.swing.JLabel();
        lbl_Info2 = new javax.swing.JLabel();
        lbl_CP = new javax.swing.JLabel();
        lbl_Resultado = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_Resultado = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ticket Nuevo");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        ta_Info.setEditable(false);
        ta_Info.setColumns(20);
        ta_Info.setRows(5);
        sp_Info.setViewportView(ta_Info);

        ta_CP.setColumns(20);
        ta_CP.setRows(5);
        sp_CP.setViewportView(ta_CP);

        cb_qPL2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona un item...", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        cb_qPL2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_qPL2ActionPerformed(evt);
            }
        });

        btn_Limpiar.setText("Limpiar");
        btn_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LimpiarActionPerformed(evt);
            }
        });

        btn_Consulta.setText("Consultar");
        btn_Consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConsultaActionPerformed(evt);
            }
        });

        lbl_Info.setText("Seleccione una consulta predeterminada");

        lbl_Info2.setText("Â¿Que vas a ver?");

        lbl_CP.setText("Consulta Personalizada:");

        lbl_Resultado.setText("Resultado Consulta:");

        tbl_Resultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbl_Resultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sp_CP)
                    .addComponent(lbl_Info)
                    .addComponent(lbl_Info2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl_CP)
                    .addComponent(sp_Info)
                    .addComponent(cb_qPL2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_Resultado)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Info)
                    .addComponent(lbl_Resultado))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cb_qPL2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_Info2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sp_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(lbl_CP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sp_CP, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_Consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(886, 489));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LimpiarActionPerformed
        ta_CP.setText("");
        ta_Info.setText("Selecciona una consulta porfavor.");
        cb_qPL2.setSelectedIndex(0);
        model.setColumnCount(0);
    }//GEN-LAST:event_btn_LimpiarActionPerformed

    /**
     *
     * @param evt the value of evt
     */
    @SuppressWarnings("null")
    private void btn_ConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConsultaActionPerformed
        // TODO add your handling code here:
        ResultSet rs = null;
        model.setRowCount(0);
        System.out.println(ta_CP.getText());
        Statement s = null;
        try {
            s = conexion.createStatement();
        } catch (SQLException se) {
            System.out.println("probando conexion de consulta");
        }

        //CONSULTAS PREDEFINIDAS
        if (cb_qPL2.getSelectedIndex() != 0 && ta_CP.getText().equals("")) {
            consultaPredefinida(rs, s);
        } //CONSULTAS PERSONALIZADAS
        else if (cb_qPL2.getSelectedIndex() == 0 && ta_CP.getText() != "") {
            try {
                rs = s.executeQuery(ta_CP.getText());
                creaColumnas(rs);

            } catch (SQLException se) {
                JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta\n"+se.getMessage(), "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
            }
            try {
                while (rs.next()) {
                    rellenaFilas(rs);
                }
            } catch (SQLException | NullPointerException se) {
                JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
        }
        cb_qPL2.setSelectedIndex(0);
    }//GEN-LAST:event_btn_ConsultaActionPerformed

    private void cb_qPL2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_qPL2ActionPerformed
        // TODO add your handling code here:
        info();
    }//GEN-LAST:event_cb_qPL2ActionPerformed

    private void creaColumnas(ResultSet rs) {
        model.setColumnCount(0);
        ResultSetMetaData rsmd;
        int Counter = 0;
        try {
            rsmd = rs.getMetaData();
            int columnsNumber = rsmd.getColumnCount();
            
            while (Counter < columnsNumber) {
                String namet = rsmd.getColumnLabel(Counter + 1);
                model.addColumn(namet);
                Counter++;
            }
            model.setColumnCount(columnsNumber);
        } catch (SQLException ex) {
            Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void rellenaFilas(ResultSet rs) {
        ResultSetMetaData rsmd;
        int ObjectCounter = 0;
        try {
            rsmd = rs.getMetaData();
            int columnsNumber = rsmd.getColumnCount();
            ArrayList<Object> o = new ArrayList<>();

            while (ObjectCounter < columnsNumber) {
                o.add(rs.getString(ObjectCounter + 1));
                ObjectCounter++;
            }
            ObjectCounter = 0;
            model.addRow(o.toArray());
        } catch (SQLException ex) {
            Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultaPredefinida(ResultSet rs, Statement s) {
        switch (cb_qPL2.getSelectedIndex()) {
            case 1:
                try {
                    rs = s.executeQuery("SELECT codigo, precio FROM producto");
                    creaColumnas(rs);
                    //Crea Columnas
                    //ResultSetMetaData rsmd = rs.getMetaData();                        
//                        columnsNumber = rsmd.getColumnCount();
//                        while (Counter < columnsNumber) {
//                            String namet = rsmd.getColumnLabel(var);
//                            model.addColumn(namet);
//                            var++;
//                            Counter++;
//                        }
//                        model.setColumnCount(columnsNumber);
                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);

                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                        //RELLENA FILAS
//                            ResultSetMetaData rsmd = rs.getMetaData();
//                            columnsNumber = rsmd.getColumnCount();
//                            ArrayList<Object> o = new ArrayList<Object>();
//                            while (ObjectCounter < columnsNumber) {
//                                o.add(rs.getString(ObjectCounter + 1));
//                                ObjectCounter++;
//                            }
//                            ObjectCounter = 0;
//                            model.addRow(o.toArray());
                    }
                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 2:
                try {
                    rs = s.executeQuery("SELECT nombre, \n"
                            + "CASE WHEN jornada IS NULL THEN 'cajero' ELSE 'reponedor' END AS tipo\n"
                            + "FROM trabajador FULL JOIN cajero ON cajero.dni_trabajador = trabajador.dni\n"
                            + "FULL JOIN reponedor ON reponedor.dni_trabajador = trabajador.dni");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);

                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 3:
                try {
                    rs = s.executeQuery("SELECT nombre \n"
                            + "FROM trabajador INNER JOIN reponedor ON trabajador.dni = reponedor.dni_trabajador\n"
                            + "WHERE jornada > 20");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 4:
                try {
                    rs = s.executeQuery("SELECT SUM(precio_iva*cantidad) FROM productos_comprados INNER JOIN producto \n"
                            + "ON producto.codigo = productos_comprados.codigo_producto");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 5:
                try {
                    rs = s.executeQuery("SELECT id_cupon, p.codigo_producto, descuento\n"
                            + "FROM cupon INNER JOIN ( SELECT socios_cupon.id_cupon_cupon, producto_cupon.codigo_producto \n"
                            + "FROM socios_cupon INNER JOIN producto_cupon \n"
                            + "ON producto_cupon.id_cupon_cupon  = socios_cupon.id_cupon_cupon) AS p\n"
                            + "ON p.id_cupon_cupon = cupon.id_cupon ");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 6:
                try {
                    rs = s.executeQuery("SELECT producto_cupon.codigo_producto FROM socios_cupon INNER JOIN producto_cupon \n"
                            + "ON socios_cupon.id_cupon_cupon =  producto_cupon.id_cupon_cupon LIMIT 5");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 7:
                try {
                    rs = s.executeQuery("SELECT CAST(avg(puntuacion) as decimal (10,2)) FROM opinion");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 8:
                try {
                    rs = s.executeQuery("SELECT contador.nombre_tienda, contador.ticket, tickets.id_ticket, tickets.nombre, tickets.ciudad\n"
                            + "FROM ( SELECT trabajador.nombre_tienda, COUNT(trabajador.nombre_tienda) AS ticket\n"
                            + "FROM ticket, cajero, trabajador\n"
                            + "WHERE ticket.dni_trabajador_cajero = cajero.dni_trabajador\n"
                            + "AND cajero.dni_trabajador = trabajador.dni\n"
                            + "GROUP BY trabajador.nombre_tienda ) AS contador\n"
                            + "INNER JOIN (SELECT trabajador.nombre_tienda, ticket.id_ticket, trabajador.nombre, tienda.ciudad\n"
                            + "FROM ticket, cajero, trabajador, tienda \n"
                            + "WHERE ticket.dni_trabajador_cajero = cajero.dni_trabajador\n"
                            + "AND cajero.dni_trabajador = trabajador.dni AND trabajador.nombre_tienda = tienda.nombre\n"
                            + "GROUP BY trabajador.nombre_tienda, ticket.id_ticket, trabajador.nombre, tienda.ciudad\n"
                            + "ORDER BY trabajador.nombre_tienda) AS tickets ON contador.nombre_tienda = tickets.nombre_tienda ");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 9:
                try {
                    rs = s.executeQuery("SELECT tienda.nombre, COUNT (trabajador.nombre_tienda) FROM tienda INNER JOIN trabajador\n"
                            + "ON trabajador.nombre_tienda = tienda.nombre GROUP BY tienda.nombre ORDER BY COUNT (trabajador.nombre_tienda)");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 10:
                try {
                    rs = s.executeQuery("SELECT dni, nombre, telefono, movil \n"
                            + "FROM \n"
                            + "(SELECT dni_trabajador1, CAST(AVG(puntuacion) AS decimal(10,2)) as media\n"
                            + "FROM trabajador_puntua_trabajador\n"
                            + "GROUP BY dni_trabajador1 ORDER BY media DESC LIMIT 1) AS mejor_empleado\n"
                            + "INNER JOIN trabajador ON dni_trabajador1 = dni");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
            case 11:
                try {
                    rs = s.executeQuery("SELECT * FROM producto_en_oferta INNER JOIN oferta ON id_oferta = id_oferta_oferta\n"
                            + "WHERE fecha_inicio >= '2019-05-01' AND fecha_fin <= '2019-05-07' ORDER BY fecha_inicio");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 12:
                try {
                    rs = s.executeQuery("SELECT nombre FROM socio WHERE numero in (SELECT numero_socio FROM ticket INNER JOIN productos_comprados ON id_ticket = id_ticket_ticket\n"
                            + "WHERE fecha >= '2019-05-24' AND fecha <= '2019-05-31' AND codigo_producto IN\n"
                            + "(SELECT codigo_producto FROM producto_en_oferta INNER JOIN oferta ON id_oferta = id_oferta_oferta\n"
                            + "WHERE fecha_inicio >= '2019-05-24' AND fecha_fin <= '2019-05-31' ORDER BY fecha_inicio))");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 13:
                try {
                    rs = s.executeQuery("SELECT trabajador.nombre, nombre_tienda, ciudad FROM tienda INNER JOIN \n"
                            + "trabajador ON nombre_tienda = tienda.nombre WHERE tienda.ciudad LIKE 'M%'");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 14:
                try {
                    rs = s.executeQuery("SELECT mail FROM socio WHERE socio.saldo_acumulado = ( SELECT MAX(saldo_acumulado) FROM socio )");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 15:
                try {
                    rs = s.executeQuery("SELECT codigo_producto, SUM(cantidad) as total\n"
                            + "FROM productos_devueltos\n"
                            + "GROUP BY codigo_producto HAVING SUM(cantidad) >= \n"
                            + "(SELECT MAX(total) FROM (SELECT SUM(cantidad) as total FROM productos_devueltos GROUP BY \n"
                            + "codigo_producto) as t)\n"
                            + "ORDER BY total desc");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 16:
                try {
                    rs = s.executeQuery("SELECT dni_trabajador, COUNT(dni_trabajador) as total\n"
                            + "FROM ticket, cajero WHERE ticket.dni_trabajador_cajero = dni_trabajador\n"
                            + "GROUP BY dni_trabajador ORDER BY total DESC\n"
                            + "LIMIT 1");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 17:
                try {
                    rs = s.executeQuery("SELECT nombre FROM opinion INNER JOIN socio ON opinion.numero_socio = socio.numero\n"
                            + "WHERE opinion.puntuacion >= ( SELECT MAX(puntuacion) FROM opinion)");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 18:
                try {
                    rs = s.executeQuery("SELECT t.id_ticket, t.nombre as nombreCajero, tienda.ciudad FROM tienda INNER JOIN ( SELECT * FROM  trabajador  \n"
                            + "																					INNER JOIN ( SELECT * FROM cajero INNER JOIN ticket \n"
                            + "ON cajero.dni_trabajador = ticket.dni_trabajador_cajero ) as p ON trabajador.dni\n"
                            + "= p.dni_trabajador_cajero ) as t ON tienda.nombre = t.nombre_tienda WHERE t.nombre LIKE 'A%' \n"
                            + "AND tienda.ciudad LIKE 'M%'");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 19:
                try {
                    rs = s.executeQuery("SELECT id_ticket, trabajador.nombre, tienda.ciudad, tienda.nombre FROM ticket, cajero, trabajador, tienda \n"
                            + "WHERE ticket.dni_trabajador_cajero = cajero.dni_trabajador AND\n"
                            + "cajero.dni_trabajador = trabajador.dni AND trabajador.nombre_tienda = tienda.nombre AND tienda.ciudad = 'Alcala'");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 20:
                try {
                    rs = s.executeQuery("SELECT id_ticket, trabajador.nombre, tienda.ciudad, tienda.nombre, fecha FROM ticket, cajero, trabajador, tienda \n"
                            + "WHERE ticket.dni_trabajador_cajero = cajero.dni_trabajador AND\n"
                            + "cajero.dni_trabajador = trabajador.dni AND trabajador.nombre_tienda = tienda.nombre \n"
                            + "AND tienda.ciudad = 'Alcala' AND id_ticket NOT IN \n"
                            + "((SELECT id_ticket FROM ticket WHERE numero_socio NOT IN ( SELECT numero_socio FROM producto_cupon INNER JOIN\n"
                            + "( SELECT id_cupon, numero_socio FROM socios_cupon INNER JOIN cupon ON id_cupon_cupon = id_cupon ) \n"
                            + "AS cupones_de_socios ON cupones_de_socios.id_cupon = producto_cupon.id_cupon_cupon ) )\n"
                            + "INTERSECT\n"
                            + "(SELECT id_ticket_ticket FROM productos_comprados INNER JOIN ( SELECT codigo_producto FROM producto_cupon INNER JOIN\n"
                            + "( SELECT id_cupon, numero_socio FROM socios_cupon INNER JOIN cupon ON id_cupon_cupon = id_cupon ) \n"
                            + "AS cupones_de_socios ON cupones_de_socios.id_cupon = producto_cupon.id_cupon_cupon ) as p \n"
                            + "ON p.codigo_producto = productos_comprados.codigo_producto)\n"
                            + ") AND id_ticket NOT IN (SELECT DISTINCT id_ticket FROM ticket, ( SELECT * FROM producto, oferta,productos_comprados, \n"
                            + "																producto_en_oferta\n"
                            + "					   WHERE producto_en_oferta.codigo_producto = producto.codigo\n"
                            + "AND productos_comprados.codigo_producto = producto.codigo ) as k WHERE id_ticket_ticket = id_ticket\n"
                            + "AND ticket.fecha BETWEEN k.fecha_inicio AND k.fecha_fin)");

                    creaColumnas(rs);

                } catch (SQLException se) {
                    JOptionPane.showMessageDialog(null, "No se pudo realizar esta consulta", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                try {
                    while (rs.next()) {
                        rellenaFilas(rs);
                    }
                } catch (SQLException | NullPointerException se) {
                    JOptionPane.showMessageDialog(null, "Error grave al mostrar datos", "Error en la Consulta", JOptionPane.ERROR_MESSAGE);
                }
                break;
        }
    }

    private void info() {
        switch (cb_qPL2.getSelectedIndex()) {
            case 1:
                ta_Info.setText("Mostrar los artÃ­culos presentes en la base de datos, mostrando su "
                        + "\ncÃ³digo de barras y el precio de venta sin IVA");
                break;
            case 2:
                ta_Info.setText("Mostrar el nombre de todos los trabajadores de la tienda indicando "
                        + "\nsi son cajeros o repartidores");
                break;
            case 3:
                ta_Info.setText("Mostrar el nombre de los reponedores de la tienda que trabajan mÃ¡s "
                        + "\nde 20 horas semanales");
                break;
            case 4:
                ta_Info.setText("Obtener el total del dinero facturado por el supermercado desde la "
                        + "\nimplementaciÃ³n de la base de datos.");
                break;
            case 5:
                ta_Info.setText("Mostrar los cupones de los clientes, junto con los productos a los "
                        + "\nque afectan y el descuento realizado");
                break;
            case 6:
                ta_Info.setText("Mostrar los 5 productos sobre los cuales los socios disponen de "
                        + "\ncupones de descuento");
                break;
            case 7:
                ta_Info.setText("Determinar el grado de satisfacciÃ³n medio de las opiniones que los "
                        + "\nclientes han realizado por internet, mostrando la puntuaciÃ³n media.");
                break;
            case 8:
                ta_Info.setText("Determinar el nÃºmero de tickets que ha emitido cada tienda, mostrando "
                        + "\nel nÃºmero de tickets, el nombre del cajero y la ciudad de la tienda donde "
                        + "\ntrabaja el mismo. Ordenar la salida de mayor a menor.");
                break;
            case 9:
                ta_Info.setText("Determinar el nÃºmero trabajadores que tiene cada tienda, ordenando la "
                        + "\nsalida de menor a mayor.");
                break;
            case 10:
                ta_Info.setText("Mostrar el nombre y los telÃ©fonos del empleado que tenga la mejor "
                        + "\npuntuaciÃ³n");
                break;
            case 11:
                ta_Info.setText("Mostrar el cÃ³digo de barras y el descuento de los productos que estaban"
                        + "\nen oferta la primera semana de mayo de 2019.");
                break;
            case 12:
                ta_Info.setText("Mostrar el nombre de los socios que se han visto beneficiados por "
                        + "\ndescuentos aplicados a algÃºn producto la Ãºltima semana de mayo de 2019");
                break;
            case 13:
                ta_Info.setText("Mostrar el nombre de los trabajadores por orden alfabÃ©tico de las "
                        + "\ntiendas situadas en ciudades que empiezan por âMâ.");
                break;
            case 14:
                ta_Info.setText("Mostrar el email del socio que mÃ¡s saldo total ha acumulado.");
                break;
            case 15:
                ta_Info.setText("Mostrar el producto que mÃ¡s veces se ha devuelto.");
                break;
            case 16:
                ta_Info.setText("Mostrar el nombre del cajero que mÃ¡s tickets ha emitido.");
                break;
            case 17:
                ta_Info.setText("Mostrar el nombre del socio que ha emitido la mejor opiniÃ³n");
                break;
            case 18:
                ta_Info.setText("Mostrar los tickes emitidos por cajeros cuyo nombre empiece por âAâ y\n"
                        + "trabajen en ciudades que empiezan por âMâ");
                break;
            case 19:
                ta_Info.setText("Mostrar el id de los tickects emitidos en las tiendas de AlcalÃ¡ de \n"
                        + "Henares junto con el nombre del cajero");
                break;
            case 20:
                ta_Info.setText("Realizar la misma consulta que el punto anterior pero para aquellos "
                        + "\ntickets en los que no se hayan utilizado cupones de descuento ni \n"
                        + "contenga ningÃºn producto de descuento");
                break;
            default:
                ta_Info.setText("Selecciona una consulta porfavor.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consultas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consultas(conexion).setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Consulta;
    private javax.swing.JButton btn_Limpiar;
    private javax.swing.JComboBox<String> cb_qPL2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_CP;
    private javax.swing.JLabel lbl_Info;
    private javax.swing.JLabel lbl_Info2;
    private javax.swing.JLabel lbl_Resultado;
    private javax.swing.JScrollPane sp_CP;
    private javax.swing.JScrollPane sp_Info;
    private javax.swing.JTextArea ta_CP;
    private javax.swing.JTextArea ta_Info;
    private javax.swing.JTable tbl_Resultado;
    // End of variables declaration//GEN-END:variables

}